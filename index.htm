<!DOCTYPE html>
<html lang="en">
<head>
		<meta charset="UTF-8">
		<meta name="viewpoint" content="width=device-width, initial-scale=1.0">
		<meta http-equiv="X-UA-Compatible" content="ie=edge">
		<title>Document</title>
		<link rel="stylesheet" href="css/main.css">



</head>
<body>

<h1>SOULMasterGILbert!</h1>


	<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/102/three.js"></script>
	<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.5/dat.gui.min.js"></script> -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.2/TweenMax.min.js"></script>


<script>

  var scene = new THREE.Scene();
  
  var camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000)
  camera.position.z = 5;
  
  var renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setClearColor("#6eeff0");
  renderer.setSize(window.innerWidth,window.innerHeight);
  
  document.body.appendChild(renderer.domElement);
  
  window.addEventListener('resize', () =>{
		renderer.setSize(window.innerWidth,window.innerHeight);
		camera.aspect = window.innerWidth / window.innerHeight;
		
		camera.updateProjectionMatrix();
  })
  		
		var raycaster = new THREE.Raycaster();
		var mouse = new THREE.Vector2();
		
		var geometry = new THREE.BoxGeometry(1,1,1);
		var material = new THREE.MeshLambertMaterial({color:0x737CA1});
		//var mesh = new THREE.Mesh(geometry, material);
		//scene.add(mesh);
		
		meshX = -10;
		for(var i = 0; i<15; i++){
			var mesh = new THREE.Mesh(geometry, material);
			mesh.position.x = (Math.random() - 0.5) * 10;
			mesh.position.y = (Math.random() - 0.5) * 10;		
			mesh.position.z = (Math.random() - 0.5) * 10;
			scene.add(mesh);
			meshX+=1;
		}
		
		
		
		
		//var geometry = new THREE.BoxGeometry(1,1,1);
		//var material = new THREE.MeshLambertMaterial({color:0xffcc00});
		//var mesh = new THREE.Mesh(geometry, material);
		//mesh.position.y = 2;
		//scene.add(mesh);
		
		var light = new THREE.PointLight(0xffffff, 1, 1000)
		light.position.set(0,0,0);
		scene.add(light);
		
		var light = new THREE.PointLight(0xffffff, 2, 1000)
		light.position.set(0,0,25);
		scene.add(light);
		
		var render = function (){
			requestAnimationFrame(render);
			
			
			/* mesh.rotation.x += 0.04;
			mesh.rotation.y += 0.01;
			mesh.rotation.z += 0.01;  ---- 3d rotation for displaying the 3d rotation*/  
			
			
			renderer.render(scene, camera);
		}
		
			function onMouseMove(event){
				event.preventDefault();
				
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse.y = -( event.clientY / window.innerHeight ) * 2 + 1;

				raycaster.setFromCamera(mouse, camera);
				
				var intersects = raycaster.intersectObjects(scene.children, true);
				for (var i = 0; i < intersects.length; i++){
				
				<!--	intersects[i].object.material.color.set(0xff0000)-->
					this.tl = new TimelineMax(/*{paused: true}*/); 
				this.tl.to(intersects[i].object.scale, 1, {x: 2, ease: Expo.easeOut})
				this.tl.to(intersects[i].object.scale, .5, {x: .5, ease: Expo.easeOut})
				this.tl.to(intersects[i].object.position, .5, {x: 2, ease: Expo.easeOut})
				this.tl.to(intersects[i].object.rotation, .5, {y: Math.PI*.5, ease: Expo.easeOut},"=1.5")
	
	
				}				
			
			}
		
		
		render();
		
		
		
		
		/*-----this ok to used ----.delay(.3);----*/
		/*
		this.tl = new TimelineMax({paused: true}); 
		this.tl.to(this.mesh.scale, 1, {x: 2, ease: Expo.easeOut})
		this.tl.to(this.mesh.scale, .5, {x: .5, ease: Expo.easeOut})
		this.tl.to(this.mesh.position, .5, {x: 2, ease: Expo.easeOut})
		this.tl.to(this.mesh.rotation, .5, {y: Math.PI*.5, ease: Expo.easeOut},"=1.5")
		*/
		/* ---document.body.addEventListener('click',() => {
			this.tl.play();
		})---*/
		
		window.addEventListener('click',onMouseMove);
		
</script>



</body>
</html>
		
